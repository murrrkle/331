function count (columns: integer, rows: integer): BigInteger

// Assertion: inputs columns or rows are an integer less than 0

1.  if (columns < 0 or rows < 0) then 
2.    throw IllegalArgumentException

      // Assertion: inputs columns or rows are an integer greater than or equal to 0

3.  elseif (columns == 0 or rows == 0) then

      // Assertion: inputs columns or rows are an integer exactly equal to 0

4.    return 1

      /* Assertion:
       *  1. inputs columns or rows are an integer exactly equal to 0
       *  2. A BigInteger with value 1 has been returned
       */
       
    // Assertion: columns and rows are both non-negative integers
    else
5.    Declare grid to be an array, with length (columns+1), of arrays with length (rows+1) of BigIntegers
6.    Declare i to be an integer variable with value 0
7.    Declare j to be an integer variable with value 0

      /* Loop Invariant:
       *  1. columns is a non-negative integer input
       *  2. 0 <= i <= (columns+1)
       *  3. grid is a 2 dimensional array, with length (columns+1), of BigInteger arrays with length (rows+1)
       *
       *  Bound Function: columns - i
       */
 
      /* Assertion - Before Loop Execution:
       *  1. The loop invariant is satisfied.
       *  2. i is equal to 0
       *  3. grid[i][0] = null, for every 0 <= i < (columns+1)
       */
       
8.    while (i < columns + 1) do

        /* Assertion - Before Each Iteration:
         *  1. The loop invariant is satisfied.
         *  2. The value of i is between 0 and (columns+1)
         *  3. grid[x][0] = BigInteger("1") for every x such that 0 <= x < i
         */
       
9.      grid[i][0] := 1
10.     i := i + 1

        /* Assertion - After Each Iteration:
         *  1. The loop invariant is satisfied.
         *  2. The value of i is between 1 and (columns+1)
         *  3. grid[x][0] = BigInteger("1") for every x such that 0 <= x < i
         */
       
      end while
                      
      /* Assertion - After Loop Execution:
       *  1. The loop invariant is satisfied.
       *  2. The value of i is equal to (columns+1)
       *  3. grid[x][0] = BigInteger("1") for every x such that 0 <= x < i
       */

      /* Loop Invariant:
       *  1. rows is a non-negative integer input
       *  2. 0 <= j <= (rows+1)
       *  3. grid is a 2 dimensional array, with length (columns+1), of BigInteger arrays with length (rows+1)
       *
       *  Bound Function: rows - i
       */       
       
      /* Assertion - Before Loop Execution:
       *  1. The loop invariant is satisfied.
       *  2. j is equal to 0
       */
       
11.   while (j < rows + 1) do

        /* Assertion - Before Each Iteration:
         *  1. The loop invariant is satisfied.
         *  2. The value of j is between 0 and (rows+1)
         */

12.     grid[0][j] := 0
13.     j := j + 1

        /* Assertion - After Each Iteration:
         *  1. The loop invariant is satisfied.
         *  2. The value of j is between 1 and (rows+1)
         */

      end while
       
      /* Assertion - After Loop Execution:
       *  1. The loop invariant is satisfied.
       *  2. The value of j is equal to (rows+1)
       
14.   Declare p to be an integer variable with value 1

      /* Loop Invariant:
       *  1. columns is a non-negative integer input
       *  2. 0 <= p <= (columns+1)
       *  3. grid is a 2 dimensional array, with length (columns+1), of BigInteger arrays with length (rows+1)
       */

15.   while (p < columns + 1) do
16.     declare q to be an integer variable with value 1

17.     while (q < rows + 1) do
18.       grid[p][q] := grd[p-1][q] + grid[p][q-1]
19.       q:= q + 1
        end while
        
20.     p := p + 1
      endwhile
      
21.   return grid[columns][rows]
    endif
end function
